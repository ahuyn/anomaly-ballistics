-- Core file for ballistics. When someone is shot, the hit will be intercepted and deferred to a custom config defined in ammo importer based on bullet type.

ini_ammo = ini_file("ammo\\importer.ltx")

function print_dbg(text, ...) 
	if get_config("debug") then
		printf("ballistics | %s | " .. text, time_global(), ...)
	end
end

-- checking if actor shot the gun and if gun is gun
function validate_hit(shit)
    if shit.draftsman and shit.draftsman:id() ~= AC_ID then return end
	if bone_id == 65535 then return end
	if shit.power >= 50 then return end
	local shooter = shit.draftsman
	local wpn = level.object_by_id(shit.weapon_id)
	if not wpn or IsGrenade(wpn) or (not IsWeapon(wpn)) then return end
	local sec = wpn:section()
	if ini_sys:r_string_ex(sec, "class") == "S_EXPLO" then return end
	if IsItem("fake_ammo_wpn",sec) then return end
    ammo_map = utils_item.get_ammo(nil, shit.weapon_id)
    local ammo = ammo_map[wpn:get_ammo_type() + 1]
    return {
        ["wpn"] = wpn, 
        ["ammo"] = ammo,
        ["wpn_sec"] = sec
    } -- returning stuff we parsed, so we don't parse it again
end

function get_handler(ammo_sec)
    if ini_ammo:section_exist(ammo_sec) then
        local proc = ini_ammo:r_string_ex(ammo_sec, "handler") or "ballistic_handlers.default"
        proc = str_explode(proc, "%.")
        return proc
    end
end

-- for the most part calculations will be deferred to function-specifics for each ammo type
-- Generically it will call a function specified in config. Function determines how damage is applied.
-- Final damage should be stored in s_hit.power field.
-- Return false or nothing in order to pass the original hit.
function on_before_hit(npc,s_hit,bone_id, is_npc)
    local valid_hit_data = validate_hit(s_hit)
    if not (valid_hit_data) then -- no data, so we don't care about the hit
        return false 
    end
    local wpn = valid_hit_data.wpn
    local ammo = valid_hit_data.ammo
    local sec = valid_hit_data.wpn_sec
    
    local func = get_handler(ammo)
    if not func then return false end
    print_dbg("Applying custom hit for %s on %s using function %s.%s. Prev hit power %s", ammo, bone_id, func[1], func[2], s_hit.power)
    local hit_ctx = {
        hit_data = valid_hit_data,
        bone_id = bone_id,
        is_npc = is_npc
    }
    -- pass to the ammo processor
    -- return value should be the new hit
    if func and func[1] and func[2] and _G[func[1]] and _G[func[1]][func[2]] then
        ret_val = _G[func[1]][func[2]](npc, s_hit, hit_ctx)
        if ret_val then s_hit = ret_val end
    end

    return {
        ["shit"] = s_hit,
        ["bone_id"] = bone_id
    }
end

-- Overriding hit callbacks so our custom hits can communicate with other scripts
local flags = { ret_value = true }

_G.CAI_Stalker__BeforeHitCallback = function(npc,shit,bone_id)
    local s_hit = shit
    flags.ret_value = true
    local custom_hit = on_before_hit(npc,s_hit,bone_id, true)
    if custom_hit then
        SendScriptCallback("npc_on_before_hit",npc,custom_hit.shit,custom_hit.bone_id, flags)
        if flags.ret_value then
            npc:set_health_ex(npc.health - custom_hit.shit.power)
            shit.power = 0.0001 -- removing engine stuff
        end
    else
        SendScriptCallback("npc_on_before_hit",npc,shit,bone_id,flags)
    end
	return flags.ret_value
end

-- bone mult is unknown for monster, so simply assume skin armor vs ap calcs
_G.CBaseMonster__BeforeHitCallback = function(monster,shit,bone_id)
	local s_hit = shit
    flags.ret_value = true
    local custom_hit = on_before_hit(monster,s_hit,bone_id, false)
    if custom_hit then
        SendScriptCallback("monster_on_before_hit",monster,custom_hit.shit,custom_hit.bone_id, flags)
        if flags.ret_value then
            shit.power = custom_hit.shit.power
            shit.ap = 0
    --         monster:set_health_ex(monster.health - custom_hit.shit.power)
    --         shit.power = 0.0001
        end
    else
        SendScriptCallback("monster_on_before_hit",monster,shit,bone_id,flags)
    end
	return flags.ret_value
end

-- If you don't use MCM, change your defaults from here.
local defaults = {
    ["debug"] = true,
    ["cost"] = true,
    ["impair"] = true,
}

function get_config(key)
    if ui_mcm then return ui_mcm.get("ballistics/"..key) else return defaults[key] end
end

function on_mcm_load()
    op = { id= "ballistics",sh=true ,gr={
            { id= "title",type= "slide",link= "ui_options_slider_player",text="ui_mcm_ballistics_title",size= {512,50},spacing= 20 },
            {id = "debug", type = "check", val = 1, def=true},
            {id = "cost", type = "check", val = 1, def=true},
            {id = "impair", type = "check", val = 1, def=true},
        }
    }
    return op
end