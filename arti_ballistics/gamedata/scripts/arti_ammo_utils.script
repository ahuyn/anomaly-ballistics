
math_random         = math.random
math_floor          = math.floor
gc                  = game.translate_string
ini_ammo            = ballistics_utils.ini_ammo
get_ammo_data       = arti_handlers.get_ammo_data
print_dbg           = ballistics_mcm.print_dbg

local modes = {
	["inventory"] = true,
}
local bags = {
	["actor_bag"] = true,
	["actor_equ"] = true,
	["actor_belt"] = true,
}
function try_mg_link(obj, bag, mode)
    if obj and bags[bag] and modes[mode] then
        if obj:section() == "ammo_7.62x54_7h1" then
            return gc("st_link")
        elseif obj:section() == "ammo_pkm_100" then
            return gc("st_unlink")
        end
    end
end

function mg_link(obj)
    -- grab up to 5 and try to link them together
    if obj:section() ==  "ammo_7.62x54_7h1" then
        local to_link = {}
        local count = 0
        db.actor:iterate_inventory(function(npc, item)
            if item:section() == "ammo_7.62x54_7h1" and count < 5 then
                to_link[item:id()] = item
                count = count + 1
            end
        end)
        local total = 0
        for k,v in pairs(to_link) do
            total = total + v:ammo_get_count()
            alife_release_id(k)
        end
        if total > 0 then
            alife_create_item("ammo_pkm_100", db.actor, {ammo = total})
        end
    elseif obj:section() == "ammo_pkm_100" then
        local count = obj:ammo_get_count()
        create_ammo("ammo_7.62x54_7h1", db.actor:position(), db.actor:level_vertex_id(), db.actor:game_vertex_id(), AC_ID, count)
        alife_release(obj)
    end
end

function downgrade_ammo(sec, bypass)
    local dg_ammo = ini_ammo:r_string_ex(sec, "dg_ammo")
    local dg_chance = ini_ammo:r_float_ex(sec, "dg_chance") or 0
    print_dbg("Attempt downgrade ammo %s to %s", sec, dg_ammo)
    if dg_ammo and (math_random() < dg_chance or bypass) then
        print_dbg("Downgrading ammo %s to %s", sec, dg_ammo)
        return dg_ammo
    else 
        return sec
    end
end

function process_wpn(wpn, bypass)
    local ammo_data = utils_item.get_ammo(wpn:section(), wpn:id())
    local ammo_data_inv = invert_table(ammo_data)
    if is_empty(ammo_data) then return end
    local ammo_type = ammo_data[wpn:get_ammo_type() + 1]
    local dg_ammo = ini_ammo:r_string_ex(ammo_type, "dg_ammo") or ""
    local dg_chance = ini_ammo:r_float_ex(ammo_type, "dg_chance") or 0
    if ammo_data_inv[dg_ammo] and (bypass or math_random() < dg_chance) then
        print_dbg("Downgrading ammo for weapon %s", wpn:section())
        local cnt = wpn:get_ammo_in_magazine()
        wpn:unload_magazine(true)
        wpn:set_ammo_type(ammo_data_inv[dg_ammo] - 1)
        wpn:set_ammo_elapsed(cnt)
    end
end


TraderAuto = trader_autoinject.update
function trader_autoinject.update(npc)
    TraderAuto(npc)
    
    if trader_autoinject.get_trader_type(npc) == 1 then
        trader_autoinject.spawn_items(npc, {
            powder_fire = 5
        }, true)
    end

    to_create = {}
    npc:iterate_inventory(function(npc, item)
        if not IsAmmo(item) then return end
        local sec = item:section()
        dg = downgrade_ammo(sec)
        if sec ~= dg then
            to_create[item:id()] = {
                sec = dg,
                cnt = item:ammo_get_count()
            }
        end
    end)
    for k,v in pairs(to_create) do
        alife_release_id(k)
        alife_create_item(v.sec, npc, {ammo = v.cnt})
    end
end

local downgrade = false

SpawnAmmo = death_manager.try_spawn_ammo
function death_manager.try_spawn_ammo(npc)
    downgrade = true
    SpawnAmmo(npc)
    downgrade = false
end
SetDrop = death_manager.set_weapon_drop_condition
function death_manager.set_weapon_drop_condition(npc,itm)
    downgrade = true
    SetDrop(npc,itm)
    downgrade = false
end
AlifeCreate = _G.alife_create_item
function _G.alife_create_item(section, obj, t)
    if downgrade and IsItem("ammo",section) and obj:id() ~= AC_ID then 
        section = downgrade_ammo(section)
    end
    return AlifeCreate(section, obj, t)
end

SetWep = death_manager.set_weapon_drop_condition
function death_manager.set_weapon_drop_condition(npc,itm)
    SetWep(npc, itm)
    process_wpn(itm)
end
-- loadout stuff

local clr_1  = utils_xml.get_color("ui_gray_1")
local clr_2  = utils_xml.get_color("ui_gray_2")
local clr_p  = utils_xml.get_color("d_purple")
gc = game.translate_string
BuildFooter = ui_item.build_desc_footer
function ui_item.build_desc_footer(obj, sec, str)
    _str = BuildFooter(obj, sec, str)
    sec = obj and obj:section() or sec
    if ini_ammo:section_exist(sec) and ini_ammo:r_string_ex(sec, "name") then
        local ammo_data = get_ammo_data(sec)
        local str_dmg = math_floor(ammo_data.k_hit * 100) .. "%"
        local str_ap = gc("st_prop_armor_".. math_floor(ammo_data.k_ap * 20))
        local str_impair = math.floor(100 * (ini_ammo:r_float_ex(sec, "impair") or 1)) .. "%"
        local str_spec = ini_ammo:r_string_ex(sec, "special")
        if str_spec then str_spec = str_explode(str_spec, ",") 
        else str_spec = {} end

        _str = _str .. "\\n \\n" .. gc("st_ball_properties") .. "\\n \\n"
        _str = _str .. " " .. clr_p .. gc("st_dot") .. " " .. clr_2 .. gc("st_prop_k_hit") .. " " .. clr_1 .. str_dmg .. "\\n"
        _str = _str .. " " .. clr_p .. gc("st_dot") .. " " .. clr_2 .. gc("st_prop_k_ap") .. " " .. clr_1 .. str_ap .. "\\n"
        _str = _str .. " " .. clr_p .. gc("st_dot") .. " " .. clr_2 .. gc("st_prop_impair") .. " " .. clr_1 .. str_impair .. "\\n"
        for k,v in pairs(str_spec) do        
            _str = _str .. " " .. clr_p .. gc("st_dot") .. " " .. clr_2 .. gc("st_ballistics_"..v) .. " " .. "\\n"
        end
    end
    return _str
end

function on_game_start()
	custom_functor_autoinject.add_functor("mg_link", try_mg_link, try_mg_link, nil, mg_link, true)
end