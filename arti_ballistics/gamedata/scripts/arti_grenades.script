-- custom handler code for rifle grenades/RPG

-- launch the specified munition
function launch(sec, pos)

end

function actor_on_weapon_fired(obj, wpn, ammo_elapsed, grenade_elapsed, ammo_type, grenade_type)
	-- local flare_section = SYS_GetParam(ammo_name, "flare_name", "str") or nil
	local section = wpn:section()
	if section == "wpn_flaregun" then
		local pos = device().cam_pos:add(device().cam_dir:mul(0.5))
		local ammos = utils_item.get_ammo(section)
		ammo_type = wpn:get_ammo_type()
		local flare_section = SYS_GetParam(0, ammos[ammo_type + 1], "flare_name")
		printf("Fired flaregun, creating flare %s", flare_section)
		launch(grenade_sec, pos)
	end
end

-- Homing function
self.homing_func = function(obj)

    -- If object out of radius - skip it
    local pos = obj:position()
    local dist = pos:distance_to_sqr(self.position)
    if dist > self.homing_radius_sqr then return end

    -- Get target direction
    local target_dir = pos:sub(self.position):normalize()

    -- Get angle between target and current directions
    local angle = yaw_degree3d(self.direction, target_dir)

    -- Get interpolation based on homing speed
    local time_delta = math.min(100, device().time_delta)
    local delta = math.max(self.homing_update_period or 0, time_delta) * 0.01
    local homing_speed = self.homing_speed * delta
    local coeff = math.min(homing_speed / angle, 1)

    -- Interpolate between current dir and target dir
    self.direction = vector():set(
        lerp(self.direction.x, target_dir.x, coeff),
        lerp(self.direction.y, target_dir.y, coeff),
        lerp(self.direction.z, target_dir.z, coeff)
    )
    return true
end

function bind(obj)
	local new_binder = projectile_binder(obj)
	obj:bind_object(new_binder)
end

class "projectile_binder" (object_binder)
function projectile_binder:__init(obj) super(obj)
end



function projectile_binder:update(delta)
end

function projectile_binder:net_spawn(data)
	if not object_binder.net_spawn(self, data) then
		return false
	end
	return true
end

function projectile_binder:net_destroy()
	object_binder.net_destroy(self)
end

function projectile_binder:net_save_relevant()
	return true
end
