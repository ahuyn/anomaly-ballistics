local ini_ammo = ini_file("ammo\\importer.ltx")

function inject_stats()
    utils_ui.stats_table["ammo"] = {
     ["damage"] = { 
        index= 1, typ= "float",  name= "st_prop_k_hit",         icon_p= "ui_wp_prop_damage",             icon_n= "", track= false,  magnitude= 1,    unit= "st_perc",            compare= false, sign=false, show_always= true, value_functor= {"a_mmo_stats_tbl","prop_damage"} },
    ["ap"] = { 
        index= 2, typ= "string",  name= "st_prop_k_ap",         icon_p= "ui_am_propery_01",             icon_n= "", track= false,  magnitude= 1,    unit= "",             compare= false, sign= false, show_always= false, value_functor= {"a_mmo_stats_tbl","prop_ap"} },
    ["hp"]= { 
        index= 3, typ= "float",   name= "st_prop_k_hp",         icon_p= "ui_am_prop_restore_bleeding",             icon_n= "", track= false,  magnitude= 1,    unit= "st_perc",              compare= false, sign= true, show_always= true, value_functor= {"a_mmo_stats_tbl","prop_hp"} },
    ["projectiles"] = { 
        index= 4, typ= "float",   name= "st_prop_projectiles",  icon_p= "ui_wp_prop_skorostrelnost",             icon_n= "", track= false,  magnitude= 1,    unit= "",             compare= false, sign= false, show_always= true, value_functor= {"a_mmo_stats_tbl","prop_projectiles"} },
    ["accuracy"] ={ 
        index= 5, typ= "float",   name= "st_prop_k_disp",       icon_p= "ui_wp_prop_tochnost",           icon_n= "", track= false,  magnitude= 1,    unit= "st_perc",       compare= false, sign= true, show_always= false, value_functor= {"a_mmo_stats_tbl","prop_accuracy"} } ,
    ["velocity"]={ 
        index= 6, typ= "float",   name= "st_prop_k_vel",       icon_p= "ui_wp_prop_nastilnost",           icon_n= "", track= false,  magnitude= 1,    unit= "st_perc",      compare= false, sign= true, show_always= false, value_functor= {"a_mmo_stats_tbl","prop_flatness"} } ,
    ["recoil"]={ 
        index= 7 , typ= "float",   name= "st_prop_recoil",       icon_p= "ui_wp_prop_otdacha",           icon_n= "", track= false,  magnitude= 1,    unit= "st_perc",   compare= false, sign= false, show_always= false, value_functor= {"a_mmo_stats_tbl","prop_recoil"} } ,    
    ["wear"]={ 
        index= 8 , typ= "float",   name= "st_prop_impair",       icon_p= "ui_wp_prop_nadezhnost",           icon_n= "", track= false,  magnitude= 1,    unit= "st_perc",   compare= false, sign= false, show_always= true, value_functor= {"a_mmo_stats_tbl","prop_wear"} } ,
    ["radius"]={ 
        index= 9 , typ= "float",   name= "st_prop_radius",       icon_p= "ui_am_prop_explo",           icon_n= "", track= false,  magnitude= 1,    unit= "m",   compare= false, sign= false, show_always= false, value_functor= {"a_mmo_stats_tbl","prop_radius"} } ,
    ["special"]={ 
        index= 10 , typ= "float",   name= "st_prop_special",       icon_p= "ui_am_condition",           icon_n= "", track= false,  magnitude= 1,    unit= "",   compare= false, sign= false, show_always=false, value_functor= {"a_mmo_stats_tbl","prop_special"} } 
    }
end

if ish_item_stats then
    override_stats_table = ish_item_stats.override_stats_table

    ish_item_stats.override_stats_table = function()
        override_stats_table()
        inject_stats()
    end
end

local function armor_to_class(val)
    val = clamp(math.floor(val * 20), 0, 7)
    return game.translate_string("st_prop_armor_"..val)
end

prepare_stats_table = utils_ui.prepare_stats_table

function utils_ui.prepare_stats_table()
    prepare_stats_table()
    inject_stats()
end

GetTable = utils_ui.get_stats_table
function utils_ui.get_stats_table(sec)
    if ini_ammo:section_exist(sec) then
        if not utils_ui.stats_table["ammo"] or is_empty(utils_ui.stats_table["ammo"]) then 
            inject_stats() 
        end
        return utils_ui.stats_table["ammo"]
    else
        return GetTable(sec)
    end
end

GetType = utils_ui.UIInfoItem.GetType
function utils_ui.UIInfoItem:GetType(sec)
    if ini_ammo:section_exist(sec) then return "ammo"
    else return GetType(self, sec) end
end

-- patching sync_finale because these post-update effects should only be applied once
Sync_Finale = utils_ui.UIInfoItem.Sync_Finale
function utils_ui.UIInfoItem:Sync_Finale(cond, ele_syncer, ele_resizer, ele_adapter, offset)
    local ret = Sync_Finale(self, cond, ele_syncer, ele_resizer, ele_adapter, offset)
    if not ele_syncer then return ret end
    -- patch the armor val
    local sec = self.section
    local obj = self.id and level.object_by_id(self.id) or nil
    if sec and ini_ammo:section_exist(sec) then
        for i=1,#self.stats do
            if self.stats[i].cap:GetText() == game.translate_string("st_prop_k_ap") then
                local str
                if ini_ammo:r_string_ex(sec, "special") == "chaos" then
                    str = "I-V"
                else
                    local ap = ini_ammo:r_float_ex(sec, "k_ap") or 0
                    str = armor_to_class(ap)
                end
                self.stats[i].txt:SetText(str)
            end
            if self.stats[i].cap:GetText() == game.translate_string("st_prop_special") then    
                local str_spec = ini_ammo:r_string_ex(sec, "special")
                if str_spec then
                    self.stats[i].txt:SetText(game.translate_string("st_ballistics_"..str_spec))
                end
            end
            if self.stats[i].cap:GetText() == game.translate_string("st_prop_k_hit") and ini_ammo:r_string_ex(sec, "special") == "chaos" then
                self.stats[i].txt:SetText("60-160%")
            end
        end
    end

end

function prop_damage(obj, sec)
    return math.floor(100 * (ini_ammo:r_float_ex(sec, "k_hit") or SYS_GetParam(2, sec, "k_hit") or 1))
end

-- pull from the armor classification
function prop_ap(obj, sec)
    return ini_ammo:r_float_ex(sec, "k_ap") or 1
end

function prop_hp(obj, sec)
    local hp = ini_ammo:r_float_ex(sec, "k_hp") or 1
    return hp > 1.01 and math.floor(100 * (hp - 1)) or 0
end

function prop_projectiles(obj, sec)
    local proj = SYS_GetParam(2, sec, "buck_shot")
    return proj > 2 and proj or 0
end

function prop_radius(obj, sec)
    return ini_ammo:r_float_ex(sec, "radius") or 0
end

-- 'normal' bullet dispersion is out of 0.66
local BASE = 0.7
function prop_accuracy(obj, sec)
    local accuracy = SYS_GetParam(2, sec, "k_disp") or BASE
    local proj = SYS_GetParam(2, sec, "buck_shot")
    if math.abs(accuracy - BASE) > 0.01 and proj == 1 then
        return math.floor(100 * (BASE - accuracy)/BASE)
    else return 0 end
end


function prop_flatness(obj, sec)
    local flat = SYS_GetParam(2, sec, "k_bullet_speed")
    if flat ~= 1 then
        return math.floor(100 * (flat - 1))
    else return 0
    end
end

function prop_recoil(obj, sec)
    if not enhanced_recoil_mcm then return 0 end
    local recoil = SYS_GetParam(2, sec, "recoil")
    if recoil ~= 1 then
        return recoil
    else return 0
    end
end

function prop_wear(obj, sec)
    local impair = ini_ammo:r_float_ex(sec, "impair") or 1
    if impair ~= 1 then
        return math.floor(100 * impair)
    else return 0
    end
end
function prop_special(obj, sec)
    local str_spec = ini_ammo:r_string_ex(sec, "special")
    if str_spec then return 1 else return 0 end
end