local ini_ammo = ini_file("ammo\\importer.ltx")


-- damage multiplier
-- ap class
-- hp expansion %
-- num projectiles
-- dispersion if applicable
-- velocity if applicable   
-- wear
-- function pop_ammo_table()
--     printf("Pop ammo table")
--     if utils_ui.stats_table.ammo then return end
--     utils_ui.add_stats_table("ammo", "damage", { 
--         index= 1, typ= "float",  name= "st_prop_k_hit",         icon_p= "ui_wp_prop_damage",             icon_n= "", track= false,  magnitude= 1,    unit= "st_stat_dmg",            compare= false, sign=false, show_always= true, value_functor= {"a_mmo_stats_tbl","prop_damage"} })
--     utils_ui.add_stats_table("ammo", "ap", { 
--         index= 2, typ= "string",  name= "st_prop_k_ap",         icon_p= "ui_am_propery_01",             icon_n= "", track= false,  magnitude= 1,    unit= "",             compare= false, sign= false, show_always= true, value_functor= {"a_mmo_stats_tbl","prop_ap"} })
--     utils_ui.add_stats_table("ammo", "hp", { 
--         index= 3, typ= "float",   name= "st_prop_k_hp",         icon_p= "ui_am_prop_restore_bleeding",             icon_n= "", track= false,  magnitude= 1,    unit= "st_perc ",              compare= false, sign= false, show_always= true, value_functor= {"a_mmo_stats_tbl","prop_hp"} })
--     utils_ui.add_stats_table("ammo", "projectiles", { 
--         index= 4, typ= "float",   name= "st_prop_projectiles",  icon_p= "ui_wp_prop_skorostrelnost",             icon_n= "", track= false,  magnitude= 1,    unit= "st_stat_dmg",             compare= false, sign= false, show_always= true, value_functor= {"a_mmo_stats_tbl","prop_projectiles"} })
--     utils_ui.add_stats_table("ammo", "accuracy",{ 
--         index= 5, typ= "float",   name= "st_prop_k_disp",       icon_p= "ui_wp_prop_tochnost",           icon_n= "", track= false,  magnitude= 1,    unit= "st_perc",       compare= false, sign= false, show_always= false, value_functor= {"a_mmo_stats_tbl","prop_accuracy"} } )
--     utils_ui.add_stats_table("ammo", "velocity",{ 
--         index= 6, typ= "float",   name= "st_prop_k_vel",       icon_p= "ui_wp_prop_nastilnost",           icon_n= "", track= false,  magnitude= 1,    unit= "st_perc",      compare= false, sign= false, show_always= false, value_functor= {"a_mmo_stats_tbl","prop_flatness"} } )
--     utils_ui.add_stats_table("ammo", "wear",{ 
--         index= 7 , typ= "float",   name= "st_prop_impair",       icon_p= "ui_wp_prop_nadezhnost",           icon_n= "", track= false,  magnitude= 1,    unit= "st_perc",   compare= false, sign= false, show_always= false, value_functor= {"a_mmo_stats_tbl","prop_wear"} } )
-- end

PrepStats = utils_ui.prepare_stats_table
function utils_ui.prepare_stats_table()
    PrepStats()
    utils_ui.stats_table["ammo"] = {
     ["damage"] = { 
        index= 1, typ= "float",  name= "st_prop_k_hit",         icon_p= "ui_wp_prop_damage",             icon_n= "", track= false,  magnitude= 1,    unit= "st_perc",            compare= false, sign=false, show_always= true, value_functor= {"a_mmo_stats_tbl","prop_damage"} },
    ["ap"] = { 
        index= 2, typ= "string",  name= "st_prop_k_ap",         icon_p= "ui_am_propery_01",             icon_n= "", track= false,  magnitude= 1,    unit= "",             compare= false, sign= false, show_always= true, value_functor= {"a_mmo_stats_tbl","prop_ap"} },
    ["hp"]= { 
        index= 3, typ= "float",   name= "st_prop_k_hp",         icon_p= "ui_am_prop_restore_bleeding",             icon_n= "", track= false,  magnitude= 1,    unit= "st_perc",              compare= false, sign= true, show_always= true, value_functor= {"a_mmo_stats_tbl","prop_hp"} },
    ["projectiles"] = { 
        index= 4, typ= "float",   name= "st_prop_projectiles",  icon_p= "ui_wp_prop_skorostrelnost",             icon_n= "", track= false,  magnitude= 1,    unit= "",             compare= false, sign= false, show_always= true, value_functor= {"a_mmo_stats_tbl","prop_projectiles"} },
    ["accuracy"] ={ 
        index= 5, typ= "float",   name= "st_prop_k_disp",       icon_p= "ui_wp_prop_tochnost",           icon_n= "", track= false,  magnitude= 1,    unit= "st_perc",       compare= false, sign= true, show_always= false, value_functor= {"a_mmo_stats_tbl","prop_accuracy"} } ,
    ["velocity"]={ 
        index= 6, typ= "float",   name= "st_prop_k_vel",       icon_p= "ui_wp_prop_nastilnost",           icon_n= "", track= false,  magnitude= 1,    unit= "st_perc",      compare= false, sign= true, show_always= false, value_functor= {"a_mmo_stats_tbl","prop_flatness"} } ,
    ["wear"]={ 
        index= 7 , typ= "float",   name= "st_prop_impair",       icon_p= "ui_wp_prop_nadezhnost",           icon_n= "", track= false,  magnitude= 1,    unit= "st_perc",   compare= false, sign= false, show_always= true, value_functor= {"a_mmo_stats_tbl","prop_wear"} } 
    }
end

GetTable = utils_ui.get_stats_table
function utils_ui.get_stats_table(sec)
    if ini_ammo:section_exist(sec) then
        return utils_ui.stats_table["ammo"]
    else
        return GetTable(sec)
    end
end

GetType = utils_ui.UIInfoItem.GetType
function utils_ui.UIInfoItem:GetType(sec)
    if ini_ammo:section_exist(sec) then return "ammo"
    else return GetType(self, sec) end
end
function prop_damage(obj, sec)
    return math.floor(100 * (ini_ammo:r_float_ex(sec, "k_hit") or SYS_GetParam(2, sec, "k_hit") or 1))
end

-- pull from the armor classification
function prop_ap(obj, sec)
    local ap = ini_ammo:r_float_ex(sec, "k_ap") or 0
    return ap * 20
end

function prop_hp(obj, sec)
    local hp = ini_ammo:r_float_ex(sec, "k_hp") or 1
    return hp > 1.01 and math.floor(100 * (hp - 1)) or 0
end

function prop_projectiles(obj, sec)
    local proj = SYS_GetParam(2, sec, "buck_shot")
    return proj > 2 and proj or 0
end

-- 'normal' bullet dispersion is out of 0.66
local BASE = 0.7
function prop_accuracy(obj, sec)
    local accuracy = SYS_GetParam(2, sec, "k_disp") or BASE
    local proj = SYS_GetParam(2, sec, "buck_shot")
    if math.abs(accuracy - BASE) > 0.01 and proj == 1 then
        return math.floor(100 * (BASE - accuracy)/BASE)
    else return 0 end
end


function prop_flatness(obj, sec)
    local flat = SYS_GetParam(2, sec, "k_bullet_speed")
    if flat ~= 1 then
        return math.floor(100 * (flat - 1))
    else return 0
    end
end

function prop_wear(obj, sec)
    local impair = ini_ammo:r_float_ex(sec, "impair") or 1
    if impair ~= 1 then
        return math.floor(100 * impair)
    else return 0
    end
end