
get_config          = ballistics_mcm.get_config
print_dbg           = ballistics_mcm.print_dbg
npc_bone_data       = ballistics_utils.npc_bone_data
modify_velocity     = ballistics_utils.modify_velocity
mutant_hp           = ballistics_utils.mutant_hp
mutant_prot_values  = ballistics_utils.mutant_prot_values
math_floor          = math.floor
math_abs            = math.abs

ini_ammo            = ballistics_utils.ini_ammo


-- calculate damage based on jurko formula
function ballistic_handlers.default(npc, s_hit, ctx)
    
    local base_power = ui_wpn_params.read_float(ctx.hit_data.wpn_sec, "", "hit_power")
    local base_hp = base_power
    local bone_data = ctx.is_npc and npc_bone_data(npc, ctx.bone_id) or mutant_prot_values(npc, ctx.bone_id)
    local k_ap = SYS_GetParam(2, ctx.hit_data.ammo, "k_ap") or 0
    local k_hit = SYS_GetParam(2, ctx.hit_data.ammo, "k_hit") or 1

    local diff = math.abs(k_ap - bone_data.armor)
    local weight_1
    local weight_2
    if diff < 0.015 then
        base_hp = 0.4 * (k_ap - bone_data.armor) + 0.6 * (base_hp - bone_data.armor)
        weight_1 = 0.4
        weight_2 = 0.6
    elseif k_ap > bone_data.armor then
        weight_1 = 0.5
        weight_2 = (2/3)
    else
        weight_1 = 1/3
        weight_2 = 0.5
    end
    base_hp = weight_1 * (k_ap - bone_data.armor) + weight_2 * (base_hp - bone_data.armor)
    print_dbg("[JURKO] Interim calc is %s", base_hp)
    base_hp = base_hp * k_hit
    base_hp = base_hp * modify_velocity(s_hit.draftsman, npc, ctx.hit_data.ammo)
    base_hp = base_hp * bone_data.mult
    print_dbg("[JURKO] Bone: %s. BA: %s. BM: %s. AP: %s. Vis: %s. Original: %s. Base hit: %s. Final hit: %s", bone_data.name, bone_data.armor, bone_data.mult, k_ap, npc:get_visual_name(), s_hit.power, base_power, base_hp)
    s_hit.power = base_hp
    return s_hit
end